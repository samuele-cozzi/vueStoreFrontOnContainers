# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- dev

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: TAG=0.0.$(Build.BuildId) docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.elk.yml -f docker-compose.infrastructure.yml build
  displayName: 'docker-compose build'

- script: |
   docker login -u samuelecozzi -p $(docker_repo_pwd)
   TAG=0.0.$(Build.BuildId) docker-compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.infrastructure.yml push
  displayName: 'docker-compose push'


# - script: TAG=0.0.$(Build.BuildId) docker-compose -f docker-compose.yml -f docker-compose.override.yml build
#   displayName: 'docker-compose build'

# - script: |
#    docker login -u samuelecozzi -p $(docker_repo_pwd)
#    TAG=0.0.$(Build.BuildId) docker-compose -f docker-compose.yml -f docker-compose.override.yml push
#   displayName: 'docker-compose push'

- powershell: |
    #.\login-k8s.ps1 -servicePrincipalSecret "$(APP_SP_SECRET)"
    az login -u $(USR) -p $(PWD)
    az account set --subscription $(SUBSCRIPTION_ID)
    az aks get-credentials --resource-group=$(AZ_RESOURCE) --name=$(AZ_K8S_NAME)
    .\deploy-all.ps1 -externalDns $(AZ_DNS) -aksName $(AZ_K8S_NAME) -aksRg $(AZ_RESOURCE) -imageTag linux-0.0.$(Build.BuildId) -useCustomRegistry $True -registry docker.io -dockerUser samuelecozzi -dockerPassword $(docker_repo_pwd)
    #.\deploy-all.ps1 -externalDns 4d1fb6b347c0421f9616.westeurope.aksapp.io -aksName vueshoponcontainer -aksRg eShopOnContainer -imageTag linux-0.0.79 -useCustomRegistry $True -registry docker.io -dockerUser samuelecozzi -dockerPassword bxi4MhIAELJe
    kubectl apply -f aks-httpaddon-cfg.yaml
    kubectl delete pod $(kubectl get pod -l app=addon-http-application-routing-nginx-ingress -n kube-system -o jsonpath="{.items[0].metadata.name}") -n kube-system
  workingDirectory: $(Build.SourcesDirectory)/k8s/helm
  displayName: 'k8s intsall all'

# - powershell: |
#     az login -u $(USR) -p $(PWD)
#     az account set --subscription IT-BU0791-PocAIPlatform-LAB
#     az aks get-credentials --resource-group=$(AZ_RESOURCE) --name=$(AZ_K8S_NAME)
#     .\deploy-all.ps1 -externalDns 0d13a6ee3e9e420d8381.westeurope.aksapp.io -aksName eshoponcontainers -aksRg eshop-on-containers -imageTag linux-0.0.42 -useCustomRegistry $True -registry docker.io -dockerUser samuelecozzi -dockerPassword $(docker_repo_pwd)
#     kubectl apply -f aks-httpaddon-cfg.yaml
#     kubectl delete pod $(kubectl get pod -l app=addon-http-application-routing-nginx-ingress -n kube-system -o jsonpath="{.items[0].metadata.name}") -n kube-system
#   workingDirectory: $(Build.SourcesDirectory)/k8s/helm
#   displayName: 'k8s intsall all'

# # # - task: Kubernetes@0
# # #   displayName: 'kubectl connection'
# # #   inputs:
# # #     kubernetesServiceConnection: 'k8s-eshoponcontainer'

# # # - script: |
# # #     sudo /usr/bin/pwsh -NoLogo -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -File "$(Build.Repository.LocalPath)/k8s/helm/install-az-modules.ps1"
# # #   displayName: 'Install Az Powershell Modules'

# # # - task: AzurePowerShell@3
# # #   displayName: 'Azure PowerShell script: InlineScript'
# # #   inputs:
# # #     azureSubscription: 'IT-BU0791-PocAIPlatform-LAB (72403a7d-eac1-44b7-b722-5101a06e422b)'
# # #     ScriptType: InlineScript
# # #     Inline: |
# # #      # You can write your azure powershell scripts inline here. 
# # #      .\deploy-all.ps1 -externalDns aks -aksName eshoponcontainers -aksRg eshop-on-containers -imageTag linux-v0.0.13 -useCustomRegistry $True -registry docker.io -dockerUser samuelecozzi -dockerPassword $(docker_repo_pwd)
# # #      # You can also pass predefined and custom variables to this script using arguments
# # #     preferredAzurePowerShellVersion: 5.1.1


  


