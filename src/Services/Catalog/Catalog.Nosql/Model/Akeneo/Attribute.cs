/*
 * Akeneo PIM API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Catalog.Nosql.Model.Akeneo
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Attribute : IEquatable<Attribute>
    { 
        /// <summary>
        /// Attribute code
        /// </summary>
        /// <value>Attribute code</value>
        [Required]
        [DataMember(Name="code")]
        public string Code { get; set; }

        /// <summary>
        /// Attribute type
        /// </summary>
        /// <value>Attribute type</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum PimCatalogIdentifierEnum for pim_catalog_identifier
            /// </summary>
            [EnumMember(Value = "pim_catalog_identifier")]
            PimCatalogIdentifierEnum = 1,
            
            /// <summary>
            /// Enum PimCatalogMetricEnum for pim_catalog_metric
            /// </summary>
            [EnumMember(Value = "pim_catalog_metric")]
            PimCatalogMetricEnum = 2,
            
            /// <summary>
            /// Enum PimCatalogNumberEnum for pim_catalog_number
            /// </summary>
            [EnumMember(Value = "pim_catalog_number")]
            PimCatalogNumberEnum = 3,
            
            /// <summary>
            /// Enum PimCatalogReferenceDataMultiSelectEnum for pim_catalog_reference_data_multi_select
            /// </summary>
            [EnumMember(Value = "pim_catalog_reference_data_multi_select")]
            PimCatalogReferenceDataMultiSelectEnum = 4,
            
            /// <summary>
            /// Enum PimCatalogReferenceDataSimpleSelectEnum for pim_catalog_reference_data_simple_select
            /// </summary>
            [EnumMember(Value = "pim_catalog_reference_data_simple_select")]
            PimCatalogReferenceDataSimpleSelectEnum = 5,
            
            /// <summary>
            /// Enum PimCatalogSimpleselectEnum for pim_catalog_simpleselect
            /// </summary>
            [EnumMember(Value = "pim_catalog_simpleselect")]
            PimCatalogSimpleselectEnum = 6,
            
            /// <summary>
            /// Enum PimCatalogMultiselectEnum for pim_catalog_multiselect
            /// </summary>
            [EnumMember(Value = "pim_catalog_multiselect")]
            PimCatalogMultiselectEnum = 7,
            
            /// <summary>
            /// Enum PimCatalogDateEnum for pim_catalog_date
            /// </summary>
            [EnumMember(Value = "pim_catalog_date")]
            PimCatalogDateEnum = 8,
            
            /// <summary>
            /// Enum PimCatalogTextareaEnum for pim_catalog_textarea
            /// </summary>
            [EnumMember(Value = "pim_catalog_textarea")]
            PimCatalogTextareaEnum = 9,
            
            /// <summary>
            /// Enum PimCatalogTextEnum for pim_catalog_text
            /// </summary>
            [EnumMember(Value = "pim_catalog_text")]
            PimCatalogTextEnum = 10,
            
            /// <summary>
            /// Enum PimCatalogFileEnum for pim_catalog_file
            /// </summary>
            [EnumMember(Value = "pim_catalog_file")]
            PimCatalogFileEnum = 11,
            
            /// <summary>
            /// Enum PimCatalogImageEnum for pim_catalog_image
            /// </summary>
            [EnumMember(Value = "pim_catalog_image")]
            PimCatalogImageEnum = 12,
            
            /// <summary>
            /// Enum PimCatalogPriceEnum for pim_catalog_price
            /// </summary>
            [EnumMember(Value = "pim_catalog_price")]
            PimCatalogPriceEnum = 13,
            
            /// <summary>
            /// Enum PimCatalogBooleanEnum for pim_catalog_boolean
            /// </summary>
            [EnumMember(Value = "pim_catalog_boolean")]
            PimCatalogBooleanEnum = 14,
            
            /// <summary>
            /// Enum AkeneoReferenceEntityEnum for akeneo_reference_entity
            /// </summary>
            [EnumMember(Value = "akeneo_reference_entity")]
            AkeneoReferenceEntityEnum = 15,
            
            /// <summary>
            /// Enum AkeneoReferenceEntityCollectionEnum for akeneo_reference_entity_collection
            /// </summary>
            [EnumMember(Value = "akeneo_reference_entity_collection")]
            AkeneoReferenceEntityCollectionEnum = 16
        }

        /// <summary>
        /// Attribute type
        /// </summary>
        /// <value>Attribute type</value>
        [Required]
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="labels")]
        public Apirestv1attributesLabels Labels { get; set; }

        /// <summary>
        /// Attribute group
        /// </summary>
        /// <value>Attribute group</value>
        [Required]
        [DataMember(Name="group")]
        public string Group { get; set; }

        /// <summary>
        /// Order of the attribute in its group
        /// </summary>
        /// <value>Order of the attribute in its group</value>
        [DataMember(Name="sort_order")]
        public int? SortOrder { get; set; }

        /// <summary>
        /// Whether the attribute is localizable, i.e. can have one value by locale
        /// </summary>
        /// <value>Whether the attribute is localizable, i.e. can have one value by locale</value>
        [DataMember(Name="localizable")]
        public bool? Localizable { get; set; }

        /// <summary>
        /// Whether the attribute is scopable, i.e. can have one value by channel
        /// </summary>
        /// <value>Whether the attribute is scopable, i.e. can have one value by channel</value>
        [DataMember(Name="scopable")]
        public bool? Scopable { get; set; }

        /// <summary>
        /// To make the attribute locale specfic, specify here for which locales it is specific
        /// </summary>
        /// <value>To make the attribute locale specfic, specify here for which locales it is specific</value>
        [DataMember(Name="available_locales")]
        public List<string> AvailableLocales { get; set; }

        /// <summary>
        /// Whether two values for the attribute cannot be the same
        /// </summary>
        /// <value>Whether two values for the attribute cannot be the same</value>
        [DataMember(Name="unique")]
        public bool? Unique { get; set; }

        /// <summary>
        /// Whether the attribute can be used as a filter for the product grid in the PIM user interface
        /// </summary>
        /// <value>Whether the attribute can be used as a filter for the product grid in the PIM user interface</value>
        [DataMember(Name="useable_as_grid_filter")]
        public bool? UseableAsGridFilter { get; set; }

        /// <summary>
        /// Number maximum of characters allowed for the value of the attribute when the attribute type is &#x60;pim_catalog_text&#x60;, &#x60;pim_catalog_textarea&#x60; or &#x60;pim_catalog_identifier&#x60;
        /// </summary>
        /// <value>Number maximum of characters allowed for the value of the attribute when the attribute type is &#x60;pim_catalog_text&#x60;, &#x60;pim_catalog_textarea&#x60; or &#x60;pim_catalog_identifier&#x60;</value>
        [DataMember(Name="max_characters")]
        public int? MaxCharacters { get; set; }

        /// <summary>
        /// Validation rule type used to validate any attribute value when the attribute type is &#x60;pim_catalog_text&#x60; or &#x60;pim_catalog_identifier&#x60;
        /// </summary>
        /// <value>Validation rule type used to validate any attribute value when the attribute type is &#x60;pim_catalog_text&#x60; or &#x60;pim_catalog_identifier&#x60;</value>
        [DataMember(Name="validation_rule")]
        public string ValidationRule { get; set; }

        /// <summary>
        /// Regexp expression used to validate any attribute value when the attribute type is &#x60;pim_catalog_text&#x60; or &#x60;pim_catalog_identifier&#x60;
        /// </summary>
        /// <value>Regexp expression used to validate any attribute value when the attribute type is &#x60;pim_catalog_text&#x60; or &#x60;pim_catalog_identifier&#x60;</value>
        [DataMember(Name="validation_regexp")]
        public string ValidationRegexp { get; set; }

        /// <summary>
        /// Whether the WYSIWYG interface is shown when the attribute type is &#x60;pim_catalog_textarea&#x60;
        /// </summary>
        /// <value>Whether the WYSIWYG interface is shown when the attribute type is &#x60;pim_catalog_textarea&#x60;</value>
        [DataMember(Name="wysiwyg_enabled")]
        public bool? WysiwygEnabled { get; set; }

        /// <summary>
        /// Minimum integer value allowed when the attribute type is &#x60;pim_catalog_metric&#x60;, &#x60;pim_catalog_price&#x60; or &#x60;pim_catalog_number&#x60;
        /// </summary>
        /// <value>Minimum integer value allowed when the attribute type is &#x60;pim_catalog_metric&#x60;, &#x60;pim_catalog_price&#x60; or &#x60;pim_catalog_number&#x60;</value>
        [DataMember(Name="number_min")]
        public string NumberMin { get; set; }

        /// <summary>
        /// Minimum integer value allowed when the attribute type is &#x60;pim_catalog_metric&#x60;, &#x60;pim_catalog_price&#x60; or &#x60;pim_catalog_number&#x60;
        /// </summary>
        /// <value>Minimum integer value allowed when the attribute type is &#x60;pim_catalog_metric&#x60;, &#x60;pim_catalog_price&#x60; or &#x60;pim_catalog_number&#x60;</value>
        [DataMember(Name="number_max")]
        public string NumberMax { get; set; }

        /// <summary>
        /// Whether decimals are allowed when the attribute type is &#x60;pim_catalog_metric&#x60;, &#x60;pim_catalog_price&#x60; or &#x60;pim_catalog_number&#x60;
        /// </summary>
        /// <value>Whether decimals are allowed when the attribute type is &#x60;pim_catalog_metric&#x60;, &#x60;pim_catalog_price&#x60; or &#x60;pim_catalog_number&#x60;</value>
        [DataMember(Name="decimals_allowed")]
        public bool? DecimalsAllowed { get; set; }

        /// <summary>
        /// Whether negative values are allowed when the attribute type is &#x60;pim_catalog_metric&#x60; or &#x60;pim_catalog_number&#x60;
        /// </summary>
        /// <value>Whether negative values are allowed when the attribute type is &#x60;pim_catalog_metric&#x60; or &#x60;pim_catalog_number&#x60;</value>
        [DataMember(Name="negative_allowed")]
        public bool? NegativeAllowed { get; set; }

        /// <summary>
        /// Metric family when the attribute type is &#x60;pim_catalog_metric&#x60;
        /// </summary>
        /// <value>Metric family when the attribute type is &#x60;pim_catalog_metric&#x60;</value>
        [DataMember(Name="metric_family")]
        public string MetricFamily { get; set; }

        /// <summary>
        /// Default metric unit when the attribute type is &#x60;pim_catalog_metric&#x60;
        /// </summary>
        /// <value>Default metric unit when the attribute type is &#x60;pim_catalog_metric&#x60;</value>
        [DataMember(Name="default_metric_unit")]
        public string DefaultMetricUnit { get; set; }

        /// <summary>
        /// Minimum date allowed when the attribute type is &#x60;pim_catalog_date&#x60;
        /// </summary>
        /// <value>Minimum date allowed when the attribute type is &#x60;pim_catalog_date&#x60;</value>
        [DataMember(Name="date_min")]
        public DateTime? DateMin { get; set; }

        /// <summary>
        /// Maximum date allowed when the attribute type is &#x60;pim_catalog_date&#x60;
        /// </summary>
        /// <value>Maximum date allowed when the attribute type is &#x60;pim_catalog_date&#x60;</value>
        [DataMember(Name="date_max")]
        public DateTime? DateMax { get; set; }

        /// <summary>
        /// Extensions allowed when the attribute type is &#x60;pim_catalog_file&#x60; or &#x60;pim_catalog_image&#x60;
        /// </summary>
        /// <value>Extensions allowed when the attribute type is &#x60;pim_catalog_file&#x60; or &#x60;pim_catalog_image&#x60;</value>
        [DataMember(Name="allowed_extensions")]
        public List<string> AllowedExtensions { get; set; }

        /// <summary>
        /// Max file size in MB when the attribute type is &#x60;pim_catalog_file&#x60; or &#x60;pim_catalog_image&#x60;
        /// </summary>
        /// <value>Max file size in MB when the attribute type is &#x60;pim_catalog_file&#x60; or &#x60;pim_catalog_image&#x60;</value>
        [DataMember(Name="max_file_size")]
        public string MaxFileSize { get; set; }

        /// <summary>
        /// Reference entity code when the attribute type is &#x60;akeneo_reference_entity&#x60; or &#x60;akeneo_reference_entity_collection&#x60;
        /// </summary>
        /// <value>Reference entity code when the attribute type is &#x60;akeneo_reference_entity&#x60; or &#x60;akeneo_reference_entity_collection&#x60;</value>
        [DataMember(Name="reference_data_name")]
        public string ReferenceDataName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attribute {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  Localizable: ").Append(Localizable).Append("\n");
            sb.Append("  Scopable: ").Append(Scopable).Append("\n");
            sb.Append("  AvailableLocales: ").Append(AvailableLocales).Append("\n");
            sb.Append("  Unique: ").Append(Unique).Append("\n");
            sb.Append("  UseableAsGridFilter: ").Append(UseableAsGridFilter).Append("\n");
            sb.Append("  MaxCharacters: ").Append(MaxCharacters).Append("\n");
            sb.Append("  ValidationRule: ").Append(ValidationRule).Append("\n");
            sb.Append("  ValidationRegexp: ").Append(ValidationRegexp).Append("\n");
            sb.Append("  WysiwygEnabled: ").Append(WysiwygEnabled).Append("\n");
            sb.Append("  NumberMin: ").Append(NumberMin).Append("\n");
            sb.Append("  NumberMax: ").Append(NumberMax).Append("\n");
            sb.Append("  DecimalsAllowed: ").Append(DecimalsAllowed).Append("\n");
            sb.Append("  NegativeAllowed: ").Append(NegativeAllowed).Append("\n");
            sb.Append("  MetricFamily: ").Append(MetricFamily).Append("\n");
            sb.Append("  DefaultMetricUnit: ").Append(DefaultMetricUnit).Append("\n");
            sb.Append("  DateMin: ").Append(DateMin).Append("\n");
            sb.Append("  DateMax: ").Append(DateMax).Append("\n");
            sb.Append("  AllowedExtensions: ").Append(AllowedExtensions).Append("\n");
            sb.Append("  MaxFileSize: ").Append(MaxFileSize).Append("\n");
            sb.Append("  ReferenceDataName: ").Append(ReferenceDataName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Attribute)obj);
        }

        /// <summary>
        /// Returns true if Attribute instances are equal
        /// </summary>
        /// <param name="other">Instance of Attribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attribute other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.Equals(other.Code)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    Labels.Equals(other.Labels)
                ) && 
                (
                    Group == other.Group ||
                    Group != null &&
                    Group.Equals(other.Group)
                ) && 
                (
                    SortOrder == other.SortOrder ||
                    SortOrder != null &&
                    SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    Localizable == other.Localizable ||
                    Localizable != null &&
                    Localizable.Equals(other.Localizable)
                ) && 
                (
                    Scopable == other.Scopable ||
                    Scopable != null &&
                    Scopable.Equals(other.Scopable)
                ) && 
                (
                    AvailableLocales == other.AvailableLocales ||
                    AvailableLocales != null &&
                    AvailableLocales.SequenceEqual(other.AvailableLocales)
                ) && 
                (
                    Unique == other.Unique ||
                    Unique != null &&
                    Unique.Equals(other.Unique)
                ) && 
                (
                    UseableAsGridFilter == other.UseableAsGridFilter ||
                    UseableAsGridFilter != null &&
                    UseableAsGridFilter.Equals(other.UseableAsGridFilter)
                ) && 
                (
                    MaxCharacters == other.MaxCharacters ||
                    MaxCharacters != null &&
                    MaxCharacters.Equals(other.MaxCharacters)
                ) && 
                (
                    ValidationRule == other.ValidationRule ||
                    ValidationRule != null &&
                    ValidationRule.Equals(other.ValidationRule)
                ) && 
                (
                    ValidationRegexp == other.ValidationRegexp ||
                    ValidationRegexp != null &&
                    ValidationRegexp.Equals(other.ValidationRegexp)
                ) && 
                (
                    WysiwygEnabled == other.WysiwygEnabled ||
                    WysiwygEnabled != null &&
                    WysiwygEnabled.Equals(other.WysiwygEnabled)
                ) && 
                (
                    NumberMin == other.NumberMin ||
                    NumberMin != null &&
                    NumberMin.Equals(other.NumberMin)
                ) && 
                (
                    NumberMax == other.NumberMax ||
                    NumberMax != null &&
                    NumberMax.Equals(other.NumberMax)
                ) && 
                (
                    DecimalsAllowed == other.DecimalsAllowed ||
                    DecimalsAllowed != null &&
                    DecimalsAllowed.Equals(other.DecimalsAllowed)
                ) && 
                (
                    NegativeAllowed == other.NegativeAllowed ||
                    NegativeAllowed != null &&
                    NegativeAllowed.Equals(other.NegativeAllowed)
                ) && 
                (
                    MetricFamily == other.MetricFamily ||
                    MetricFamily != null &&
                    MetricFamily.Equals(other.MetricFamily)
                ) && 
                (
                    DefaultMetricUnit == other.DefaultMetricUnit ||
                    DefaultMetricUnit != null &&
                    DefaultMetricUnit.Equals(other.DefaultMetricUnit)
                ) && 
                (
                    DateMin == other.DateMin ||
                    DateMin != null &&
                    DateMin.Equals(other.DateMin)
                ) && 
                (
                    DateMax == other.DateMax ||
                    DateMax != null &&
                    DateMax.Equals(other.DateMax)
                ) && 
                (
                    AllowedExtensions == other.AllowedExtensions ||
                    AllowedExtensions != null &&
                    AllowedExtensions.SequenceEqual(other.AllowedExtensions)
                ) && 
                (
                    MaxFileSize == other.MaxFileSize ||
                    MaxFileSize != null &&
                    MaxFileSize.Equals(other.MaxFileSize)
                ) && 
                (
                    ReferenceDataName == other.ReferenceDataName ||
                    ReferenceDataName != null &&
                    ReferenceDataName.Equals(other.ReferenceDataName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                    if (Group != null)
                    hashCode = hashCode * 59 + Group.GetHashCode();
                    if (SortOrder != null)
                    hashCode = hashCode * 59 + SortOrder.GetHashCode();
                    if (Localizable != null)
                    hashCode = hashCode * 59 + Localizable.GetHashCode();
                    if (Scopable != null)
                    hashCode = hashCode * 59 + Scopable.GetHashCode();
                    if (AvailableLocales != null)
                    hashCode = hashCode * 59 + AvailableLocales.GetHashCode();
                    if (Unique != null)
                    hashCode = hashCode * 59 + Unique.GetHashCode();
                    if (UseableAsGridFilter != null)
                    hashCode = hashCode * 59 + UseableAsGridFilter.GetHashCode();
                    if (MaxCharacters != null)
                    hashCode = hashCode * 59 + MaxCharacters.GetHashCode();
                    if (ValidationRule != null)
                    hashCode = hashCode * 59 + ValidationRule.GetHashCode();
                    if (ValidationRegexp != null)
                    hashCode = hashCode * 59 + ValidationRegexp.GetHashCode();
                    if (WysiwygEnabled != null)
                    hashCode = hashCode * 59 + WysiwygEnabled.GetHashCode();
                    if (NumberMin != null)
                    hashCode = hashCode * 59 + NumberMin.GetHashCode();
                    if (NumberMax != null)
                    hashCode = hashCode * 59 + NumberMax.GetHashCode();
                    if (DecimalsAllowed != null)
                    hashCode = hashCode * 59 + DecimalsAllowed.GetHashCode();
                    if (NegativeAllowed != null)
                    hashCode = hashCode * 59 + NegativeAllowed.GetHashCode();
                    if (MetricFamily != null)
                    hashCode = hashCode * 59 + MetricFamily.GetHashCode();
                    if (DefaultMetricUnit != null)
                    hashCode = hashCode * 59 + DefaultMetricUnit.GetHashCode();
                    if (DateMin != null)
                    hashCode = hashCode * 59 + DateMin.GetHashCode();
                    if (DateMax != null)
                    hashCode = hashCode * 59 + DateMax.GetHashCode();
                    if (AllowedExtensions != null)
                    hashCode = hashCode * 59 + AllowedExtensions.GetHashCode();
                    if (MaxFileSize != null)
                    hashCode = hashCode * 59 + MaxFileSize.GetHashCode();
                    if (ReferenceDataName != null)
                    hashCode = hashCode * 59 + ReferenceDataName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Attribute left, Attribute right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Attribute left, Attribute right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
