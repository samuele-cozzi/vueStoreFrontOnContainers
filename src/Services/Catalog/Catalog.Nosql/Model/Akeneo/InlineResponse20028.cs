/*
 * Akeneo PIM API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Catalog.Nosql.Model.Akeneo
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20028 : IEquatable<InlineResponse20028>
    { 
        /// <summary>
        /// Host name
        /// </summary>
        /// <value>Host name</value>
        [DataMember(Name="host")]
        public string Host { get; set; }

        /// <summary>
        /// Endpoint to get the authentication token
        /// </summary>
        /// <value>Endpoint to get the authentication token</value>
        [DataMember(Name="authentication")]
        public Object Authentication { get; set; }

        /// <summary>
        /// All the availables endpoints
        /// </summary>
        /// <value>All the availables endpoints</value>
        [DataMember(Name="routes")]
        public Object Routes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20028 {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Authentication: ").Append(Authentication).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20028)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20028 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20028 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20028 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Host == other.Host ||
                    Host != null &&
                    Host.Equals(other.Host)
                ) && 
                (
                    Authentication == other.Authentication ||
                    Authentication != null &&
                    Authentication.Equals(other.Authentication)
                ) && 
                (
                    Routes == other.Routes ||
                    Routes != null &&
                    Routes.Equals(other.Routes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Host != null)
                    hashCode = hashCode * 59 + Host.GetHashCode();
                    if (Authentication != null)
                    hashCode = hashCode * 59 + Authentication.GetHashCode();
                    if (Routes != null)
                    hashCode = hashCode * 59 + Routes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20028 left, InlineResponse20028 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20028 left, InlineResponse20028 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
