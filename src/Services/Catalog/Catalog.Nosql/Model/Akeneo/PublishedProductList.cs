/*
 * Akeneo PIM API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Catalog.Nosql.Model.Akeneo
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PublishedProductList : IEquatable<PublishedProductList>
    { 
        /// <summary>
        /// Published product identifier, i.e. the value of the only &#x60;pim_catalog_identifier&#x60; attribute
        /// </summary>
        /// <value>Published product identifier, i.e. the value of the only &#x60;pim_catalog_identifier&#x60; attribute</value>
        [Required]
        [DataMember(Name="identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Whether the published product is enable
        /// </summary>
        /// <value>Whether the published product is enable</value>
        [DataMember(Name="enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Family code from which the published product inherits its attributes and attributes requirements
        /// </summary>
        /// <value>Family code from which the published product inherits its attributes and attributes requirements</value>
        [DataMember(Name="family")]
        public string Family { get; set; }

        /// <summary>
        /// Codes of the categories in which the published product is classified
        /// </summary>
        /// <value>Codes of the categories in which the published product is classified</value>
        [DataMember(Name="categories")]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Codes of the groups to which the published product belong
        /// </summary>
        /// <value>Codes of the groups to which the published product belong</value>
        [DataMember(Name="groups")]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values")]
        public InlineResponse2003Values Values { get; set; }

        /// <summary>
        /// Gets or Sets Associations
        /// </summary>
        [DataMember(Name="associations")]
        public InlineResponse2003Associations Associations { get; set; }

        /// <summary>
        /// Date of creation
        /// </summary>
        /// <value>Date of creation</value>
        [DataMember(Name="created")]
        public string Created { get; set; }

        /// <summary>
        /// Date of the last update
        /// </summary>
        /// <value>Date of the last update</value>
        [DataMember(Name="updated")]
        public string Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublishedProductList {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Family: ").Append(Family).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PublishedProductList)obj);
        }

        /// <summary>
        /// Returns true if PublishedProductList instances are equal
        /// </summary>
        /// <param name="other">Instance of PublishedProductList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublishedProductList other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identifier == other.Identifier ||
                    Identifier != null &&
                    Identifier.Equals(other.Identifier)
                ) && 
                (
                    Enabled == other.Enabled ||
                    Enabled != null &&
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    Family == other.Family ||
                    Family != null &&
                    Family.Equals(other.Family)
                ) && 
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    Groups == other.Groups ||
                    Groups != null &&
                    Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    Values == other.Values ||
                    Values != null &&
                    Values.Equals(other.Values)
                ) && 
                (
                    Associations == other.Associations ||
                    Associations != null &&
                    Associations.Equals(other.Associations)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                    if (Enabled != null)
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (Family != null)
                    hashCode = hashCode * 59 + Family.GetHashCode();
                    if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                    if (Groups != null)
                    hashCode = hashCode * 59 + Groups.GetHashCode();
                    if (Values != null)
                    hashCode = hashCode * 59 + Values.GetHashCode();
                    if (Associations != null)
                    hashCode = hashCode * 59 + Associations.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PublishedProductList left, PublishedProductList right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PublishedProductList left, PublishedProductList right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
